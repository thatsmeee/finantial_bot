import telebot
from telebot import types
import sqlite3

API_TOKEN = '7248624438:AAEffysZJkUWtpg7gpglEJe889oMvs1QFdM'
OPERATOR_CHAT_IDS = ['1666259057', '1625312942']
bot = telebot.TeleBot(API_TOKEN)

courses_db_file = 'courses.db'
logs_db_file = 'logs.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
def init_dbs():
    with sqlite3.connect(courses_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS courses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                price INTEGER NOT NULL,
                description TEXT NOT NULL
            )
        """)
    with sqlite3.connect(logs_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER,
                action TEXT,
                details TEXT
            )
        """)
    conn.commit()

# –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def log_action(user_id, action, details):
    with sqlite3.connect(logs_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO logs (user_id, action, details)
            VALUES (?, ?, ?)
        """, (user_id, action, details))
    conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_course_to_db(name, price, description):
    with sqlite3.connect(courses_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO courses (name, price, description)
            VALUES (?, ?, ?)
        """, (name, price, description))
    conn.commit()
    log_action(None, 'add_course', f"Name: {name}, Price: {price}, Description: {description}")

# –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_course_from_db(course_id):
    with sqlite3.connect(courses_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            DELETE FROM courses WHERE id = ?
        """, (course_id,))
    conn.commit()
    log_action(None, 'delete_course', f"Course ID: {course_id}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_courses_from_db():
    with sqlite3.connect(courses_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, name, price, description FROM courses
        """)
        courses = cursor.fetchall()
    return courses

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID
def get_course_from_db(course_id):
    with sqlite3.connect(courses_db_file) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, name, price, description FROM courses WHERE id = ?
        """, (course_id,))
        course = cursor.fetchone()
    return course

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses'))
    markup.add(types.InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data='contact_operator_main'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_menu())
    log_action(message.from_user.id, 'start', 'Started interaction')

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return str(user_id) in OPERATOR_CHAT_IDS

# –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
@bot.message_handler(commands=['add_course'])
def prompt_add_course(message):
    if is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.")
        bot.register_next_step_handler(message, get_course_name)
        log_action(message.from_user.id, 'prompt_add_course', 'Prompted to enter course name')
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

def get_course_name(message):
    bot.chat_data = {'name': message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞.")
    bot.register_next_step_handler(message, get_course_price)
    log_action(message.from_user.id, 'get_course_name', f"Name: {message.text}")

def get_course_price(message):
    try:
        bot.chat_data['price'] = int(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞.")
        bot.register_next_step_handler(message, get_course_description)
        log_action(message.from_user.id, 'get_course_price', f"Price: {message.text}")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

def get_course_description(message):
    bot.chat_data['description'] = message.text
    name = bot.chat_data['name']
    price = bot.chat_data['price']
    description = bot.chat_data['description']
    add_course_to_db(name, price, description)
    bot.send_message(message.chat.id, f"–ö—É—Ä—Å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    log_action(message.from_user.id, 'add_course', f"Name: {name}, Price: {price}, Description: {description}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_course
@bot.message_handler(commands=['delete_course'])
def prompt_delete_course(message):
    if is_admin(message.chat.id):
        markup = types.InlineKeyboardMarkup()
        courses = get_courses_from_db()
        for course in courses:
            markup.add(types.InlineKeyboardButton(course[1], callback_data=f"delete_{course[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        log_action(message.from_user.id, 'prompt_delete_course', 'Prompted to choose course to delete')
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_course(call):
    if is_admin(call.message.chat.id):
        course_id = int(call.data.split('_')[1])
        delete_course_from_db(course_id)
        bot.send_message(call.message.chat.id, "–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω.")
        log_action(call.from_user.id, 'delete_course', f"Course ID: {course_id}")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'courses')
def list_courses(call):
    markup = types.InlineKeyboardMarkup()
    courses = get_courses_from_db()
    if courses:
        for course in courses:
            markup.add(types.InlineKeyboardButton(course[1], callback_data=f"view_{course[0]}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –í–∞–º –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É:", reply_markup=markup)
        log_action(call.from_user.id, 'list_courses', 'Listed available courses')
    else:
        bot.send_message(call.message.chat.id, "–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('view_'))
def view_course(call):
    course_id = int(call.data.split('_')[1])
    course = get_course_from_db(course_id)
    if course:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"contact_operator_{course_id}"))
        web_info = types.WebAppInfo('https://thatsmeee.github.io/finantial/payment/crypto/index.html')
        web_info2 = types.WebAppInfo('https://thatsmeee.github.io/finantial/payment/mono/index.html')
        markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", web_app=web_info))
        markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ( üá∫üá¶ )", web_app=web_info2))
        markup.add(types.InlineKeyboardButton("–Ø –û–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_succeeded_{course_id}"))
        bot.send_message(call.message.chat.id,
                         f"{course[1]}\n\n{course[3]}\n\n–¶–µ–Ω–∞: ${course[2]}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
                         reply_markup=markup)
        log_action(call.from_user.id, 'view_course', f"Course ID: {course_id}")
    else:
        bot.send_message(call.message.chat.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('contact_operator_'))
def contact_operator(call):
    course_id_str = call.data.split('_')[2]
    if course_id_str == 'main':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        bot.register_next_step_handler(call.message, forward_to_operator_main)
        log_action(call.from_user.id, 'contact_operator_main', 'Requested to contact operator')
    else:
        try:
            course_id = int(course_id_str)
            course = get_course_from_db(course_id)
            if course:
                bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
                bot.register_next_step_handler(call.message, forward_to_operator, course_id, call.message.message_id)
                log_action(call.from_user.id, 'contact_operator', f"Course ID: {course_id}")
            else:
                bot.send_message(call.message.chat.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('payment_succeeded_'))
def payment_succeeded(call):
    user_username = call.from_user.username if call.from_user.username else "unknown"
    bot.send_message('-4275584152', f"–ö–∞–∫–æ–π-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ. –ï–≥–æ –Ω–∏–∫: {call.from_user.id} @{user_username}")
    log_action(call.from_user.id, 'payment_succeeded', f"Course ID: {call.data.split('_')[2]}")

def forward_to_operator(message, course_id, original_message_id):
    course = get_course_from_db(course_id)
    if course:
        forward_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∫—É—Ä—Å–æ–º '{course[1]}'.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        for admin_id in OPERATOR_CHAT_IDS:
            bot.send_message(admin_id, forward_message)
        bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        log_action(message.from_user.id, 'forward_to_operator', f"Message to operators about course ID: {course_id}")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def forward_to_operator_main(message):
    forward_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    for admin_id in OPERATOR_CHAT_IDS:
        bot.send_message(admin_id, forward_message)
    bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    log_action(message.from_user.id, 'forward_to_operator_main', 'Message to operators')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in OPERATOR_CHAT_IDS)
def handle_operator_message(message):
    if hasattr(bot, 'chat_data') and 'user_id' in bot.chat_data:
        user_id = bot.chat_data['user_id']
        original_message_id = bot.chat_data.get('original_message_id', None)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if original_message_id:
            bot.forward_message(user_id, message.chat.id, message.message_id)
        else:
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")

        bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        log_action(message.from_user.id, 'handle_operator_message', f"Message to user ID: {user_id}")
        del bot.chat_data  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

@bot.message_handler(commands=['83672064628'])
def send_message(message):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /83672064628 <user_id>")
            return
        user_id = parts[1]
        user_message = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—Å! –í–æ—Ç –í–∞—à –≥–æ—Ç–æ–≤—ã–π –∫—É—Ä—Å –ø—Ä–æ –ø–µ—Ä–µ–ª–∏–≤ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º:"
        markup = types.InlineKeyboardMarkup()
        web_info = types.WebAppInfo('https://thatsmeee.github.io/finantial/course/course_one/index.html')
        markup.add(types.InlineKeyboardButton("–ö—É—Ä—Å", web_app=web_info))
        bot.send_message(user_id, user_message, reply_markup=markup)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        log_action(message.from_user.id, 'send_message', f"Message sent to user ID: {user_id}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['320115612'])
def send_message(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /320115612 <user_id> <message>")
            return
        user_id = parts[1]
        user_message = parts[2]
        bot.send_message(user_id, user_message)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        log_action(message.from_user.id, 'send_message', f"Message sent to user ID: {user_id}")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    init_dbs()
    bot.polling(none_stop=True)
